// src/stories/backend/GolangAPIs.stories.tsx
import React from 'react';
// @ts-ignore
import type { Meta, StoryObj } from '@storybook/react';
import { BackendOverview } from './components/BackendOverview';
import { APIDocumentation } from './components/APIDocumentation';
import { BusinessRules } from './components/BusinessRules';
import { IntegrationFlow } from './components/IntegrationFlow';

const meta: Meta<typeof BackendOverview> = {
  title: 'Backend/Golang APIs',
  parameters: {
    layout: 'fullscreen',
  },
  tags: ['autodocs'],
};

export default meta;
type Story = StoryObj<typeof BackendOverview>;

export const Overview: Story = {
  render: () => (
    <BackendOverview
      title="ðŸ”µ Golang APIs (Invest Tracker)"
      description="DocumentaÃ§Ã£o completa das APIs Golang do Monorepo, focadas em anÃ¡lise de mercado, estratÃ©gias de investimento e processamento de alta performance."
      technologies={[
        'Golang - Linguagem de alta performance',
        'Gin Framework - Framework web minimalista',
        'MongoDB - Banco de dados para dados financeiros',
        'Redis - Cache para dados em tempo real',
        'Binance API - IntegraÃ§Ã£o com mercado de criptomoedas',
        'Docker - ContainerizaÃ§Ã£o e deploy'
      ]}
      responsibilities={[
        'AnÃ¡lise de dados financeiros em tempo real',
        'EstratÃ©gias de investimento automatizadas',
        'IntegraÃ§Ã£o com APIs externas (Binance)',
        'Processamento de alta performance',
        'SimulaÃ§Ã£o de estratÃ©gias de trading',
        'NotificaÃ§Ãµes de oportunidades de mercado'
      ]}
    />
  ),
};

export const InvestTrackerAPI: Story = {
  render: () => (
    <APIDocumentation
      title="ðŸ“ˆ Invest Tracker API"
      description="Sistema completo de anÃ¡lise de investimentos e estratÃ©gias de trading"
      endpoints={[
        {
          method: 'GET',
          path: '/api/invest/analysis',
          description: 'Obter anÃ¡lise de mercado',
          parameters: ['symbol', 'timeframe', 'indicators'],
          response: 'MarketAnalysis'
        },
        {
          method: 'POST',
          path: '/api/invest/strategy',
          description: 'Criar nova estratÃ©gia',
          parameters: ['name', 'type', 'parameters', 'riskLevel'],
          response: 'StrategyCreated'
        },
        {
          method: 'GET',
          path: '/api/invest/opportunities',
          description: 'Obter oportunidades de investimento',
          parameters: ['market', 'riskLevel', 'timeframe'],
          response: 'OpportunitiesList'
        },
        {
          method: 'POST',
          path: '/api/invest/simulation',
          description: 'Simular estratÃ©gia de trading',
          parameters: ['strategyId', 'initialCapital', 'period'],
          response: 'SimulationResult'
        }
      ]}
      businessRules={[
        'AnÃ¡lises sÃ£o atualizadas a cada 5 minutos',
        'EstratÃ©gias devem ter nÃ­vel de risco definido',
        'SimulaÃ§Ãµes sÃ£o limitadas a 1 ano de dados',
        'Oportunidades sÃ£o filtradas por perfil de risco',
        'Dados sÃ£o validados antes do processamento'
      ]}
      integrations={[
        'Binance API - Dados de mercado em tempo real',
        'MongoDB - PersistÃªncia de estratÃ©gias e anÃ¡lises',
        'Redis - Cache de dados de mercado',
        'Notification Service - Alertas de oportunidades',
        'Analytics Engine - Processamento de dados'
      ]}
    />
  ),
};

export const MarketAnalysisAPI: Story = {
  render: () => (
    <APIDocumentation
      title="ðŸ“Š Market Analysis API"
      description="AnÃ¡lise avanÃ§ada de mercado com indicadores tÃ©cnicos e fundamentais"
      endpoints={[
        {
          method: 'GET',
          path: '/api/market/indicators',
          description: 'Obter indicadores tÃ©cnicos',
          parameters: ['symbol', 'timeframe', 'indicators'],
          response: 'TechnicalIndicators'
        },
        {
          method: 'GET',
          path: '/api/market/trend',
          description: 'Analisar tendÃªncia do mercado',
          parameters: ['symbol', 'period', 'confidence'],
          response: 'TrendAnalysis'
        },
        {
          method: 'POST',
          path: '/api/market/scan',
          description: 'Escanear mercado por oportunidades',
          parameters: ['filters', 'criteria', 'limit'],
          response: 'MarketScanResults'
        },
        {
          method: 'GET',
          path: '/api/market/volatility',
          description: 'Calcular volatilidade do ativo',
          parameters: ['symbol', 'period', 'method'],
          response: 'VolatilityData'
        }
      ]}
      businessRules={[
        'Indicadores sÃ£o calculados em tempo real',
        'TendÃªncias sÃ£o baseadas em mÃºltiplos timeframes',
        'Scans sÃ£o limitados a 100 resultados',
        'Volatilidade Ã© calculada usando GARCH',
        'Dados histÃ³ricos sÃ£o mantidos por 2 anos'
      ]}
      integrations={[
        'Binance API - Dados de preÃ§os e volume',
        'MongoDB - HistÃ³rico de anÃ¡lises',
        'Redis - Cache de indicadores',
        'ML Engine - Algoritmos de anÃ¡lise',
        'Alert Service - NotificaÃ§Ãµes de alertas'
      ]}
    />
  ),
};

export const StrategySimulatorAPI: Story = {
  render: () => (
    <APIDocumentation
      title="ðŸŽ¯ Strategy Simulator API"
      description="Simulador de estratÃ©gias de trading com backtesting avanÃ§ado"
      endpoints={[
        {
          method: 'POST',
          path: '/api/simulator/backtest',
          description: 'Executar backtest de estratÃ©gia',
          parameters: ['strategy', 'startDate', 'endDate', 'capital'],
          response: 'BacktestResult'
        },
        {
          method: 'GET',
          path: '/api/simulator/performance',
          description: 'Obter mÃ©tricas de performance',
          parameters: ['simulationId', 'metrics'],
          response: 'PerformanceMetrics'
        },
        {
          method: 'POST',
          path: '/api/simulator/optimize',
          description: 'Otimizar parÃ¢metros da estratÃ©gia',
          parameters: ['strategy', 'parameters', 'objective'],
          response: 'OptimizationResult'
        },
        {
          method: 'GET',
          path: '/api/simulator/risk',
          description: 'Analisar risco da estratÃ©gia',
          parameters: ['strategy', 'scenarios'],
          response: 'RiskAnalysis'
        }
      ]}
      businessRules={[
        'Backtests sÃ£o limitados a 5 anos de dados',
        'SimulaÃ§Ãµes sÃ£o executadas em paralelo',
        'OtimizaÃ§Ãµes sÃ£o limitadas a 1000 iteraÃ§Ãµes',
        'AnÃ¡lises de risco incluem stress testing',
        'Resultados sÃ£o armazenados por 30 dias'
      ]}
      integrations={[
        'Historical Data Service - Dados histÃ³ricos',
        'MongoDB - Resultados de simulaÃ§Ãµes',
        'Redis - Cache de cÃ¡lculos',
        'ML Engine - Algoritmos de otimizaÃ§Ã£o',
        'Risk Engine - CÃ¡lculos de risco'
      ]}
    />
  ),
};

export const GolangBusinessRules: Story = {
  render: () => (
    <BusinessRules
      title="ðŸ“‹ Regras de NegÃ³cio - Golang APIs"
      rules={[
        {
          category: 'AnÃ¡lise de Mercado',
          rules: [
            'Dados sÃ£o atualizados a cada 5 minutos',
            'Indicadores sÃ£o calculados em tempo real',
            'TendÃªncias sÃ£o baseadas em mÃºltiplos timeframes',
            'AnÃ¡lises sÃ£o validadas antes da publicaÃ§Ã£o',
            'Cache Ã© invalidado apÃ³s 10 minutos'
          ]
        },
        {
          category: 'EstratÃ©gias de Investimento',
          rules: [
            'EstratÃ©gias devem ter nÃ­vel de risco definido',
            'ParÃ¢metros sÃ£o validados antes da execuÃ§Ã£o',
            'SimulaÃ§Ãµes sÃ£o limitadas a 5 anos de dados',
            'OtimizaÃ§Ãµes sÃ£o limitadas a 1000 iteraÃ§Ãµes',
            'Resultados sÃ£o armazenados por 30 dias'
          ]
        },
        {
          category: 'IntegraÃ§Ã£o com APIs Externas',
          rules: [
            'Rate limiting: 1200 requests/min para Binance',
            'Retry automÃ¡tico em caso de falha',
            'Timeout de 30 segundos para requests',
            'Dados sÃ£o validados antes do armazenamento',
            'Logs sÃ£o mantidos por 90 dias'
          ]
        },
        {
          category: 'Performance e Escalabilidade',
          rules: [
            'Processamento paralelo para anÃ¡lises',
            'Cache de dados por 10 minutos',
            'CompressÃ£o de dados histÃ³ricos',
            'Limpeza automÃ¡tica de dados antigos',
            'Monitoramento de performance em tempo real'
          ]
        }
      ]}
    />
  ),
};

export const GolangIntegrationFlow: Story = {
  render: () => (
    <IntegrationFlow
      title="ðŸ”„ Fluxo de IntegraÃ§Ã£o - Golang APIs"
      description="Como as APIs Golang se integram com serviÃ§os externos e internos"
      flows={[
        {
          name: 'Fluxo de AnÃ¡lise de Mercado',
          steps: [
            'Coleta de dados da Binance API',
            'ValidaÃ§Ã£o e limpeza dos dados',
            'CÃ¡lculo de indicadores tÃ©cnicos',
            'AnÃ¡lise de tendÃªncias e padrÃµes',
            'Armazenamento no MongoDB',
            'Cache no Redis para acesso rÃ¡pido'
          ],
          integrations: ['Binance API', 'MongoDB', 'Redis', 'ML Engine']
        },
        {
          name: 'Fluxo de SimulaÃ§Ã£o de EstratÃ©gia',
          steps: [
            'Recebimento de parÃ¢metros da estratÃ©gia',
            'Carregamento de dados histÃ³ricos',
            'ExecuÃ§Ã£o da simulaÃ§Ã£o em paralelo',
            'CÃ¡lculo de mÃ©tricas de performance',
            'AnÃ¡lise de risco e drawdown',
            'Armazenamento dos resultados'
          ],
          integrations: ['Historical Data Service', 'MongoDB', 'Risk Engine', 'Analytics Engine']
        },
        {
          name: 'Fluxo de NotificaÃ§Ãµes',
          steps: [
            'DetecÃ§Ã£o de oportunidades de mercado',
            'Filtragem por perfil de risco',
            'CÃ¡lculo de confianÃ§a da oportunidade',
            'Envio de notificaÃ§Ã£o ao usuÃ¡rio',
            'Log da notificaÃ§Ã£o para auditoria'
          ],
          integrations: ['Alert Service', 'Notification Service', 'MongoDB', 'User Service']
        }
      ]}
    />
  ),
};
