// src/stories/backend/NodejsAPIs.stories.tsx
import React from 'react';
// @ts-ignore
import type { Meta, StoryObj } from '@storybook/react';
import { BackendOverview } from './components/BackendOverview';
import { APIDocumentation } from './components/APIDocumentation';
import { BusinessRules } from './components/BusinessRules';
import { IntegrationFlow } from './components/IntegrationFlow';

const meta: Meta<typeof BackendOverview> = {
  title: 'Backend/Node.js APIs',
  parameters: {
    layout: 'fullscreen',
  },
  tags: ['autodocs'],
};

export default meta;
type Story = StoryObj<typeof BackendOverview>;

export const Overview: Story = {
  render: () => (
    <BackendOverview
      title="ðŸŸ¢ Node.js APIs (NestJS)"
      description="DocumentaÃ§Ã£o completa das APIs Node.js do Monorepo, incluindo regras de negÃ³cio, fluxos de integraÃ§Ã£o e responsabilidades."
      technologies={[
        'NestJS Framework - Arquitetura modular e escalÃ¡vel',
        'TypeScript - Tipagem estÃ¡tica e desenvolvimento seguro',
        'MongoDB - Banco de dados NoSQL principal',
        'Redis - Cache e gerenciamento de sessÃµes',
        'JWT - AutenticaÃ§Ã£o e autorizaÃ§Ã£o',
        'Swagger - DocumentaÃ§Ã£o automÃ¡tica de APIs'
      ]}
      responsibilities={[
        'APIs RESTful para frontend e mobile',
        'AutenticaÃ§Ã£o e autorizaÃ§Ã£o de usuÃ¡rios',
        'Processamento de pagamentos e transaÃ§Ãµes',
        'Gerenciamento de produtos e catÃ¡logo',
        'Sistema de gamificaÃ§Ã£o e analytics',
        'Assistente educacional com IA'
      ]}
    />
  ),
};

export const LifeTrackerAPI: Story = {
  render: () => (
    <APIDocumentation
      title="ðŸ“Š Life Tracker API"
      description="Sistema completo de rastreamento de vida, produtividade e gamificaÃ§Ã£o"
      endpoints={[
        {
          method: 'GET',
          path: '/api/life-tracker/analytics',
          description: 'Obter analytics de produtividade',
          parameters: ['userId', 'dateRange', 'metrics'],
          response: 'AnalyticsData'
        },
        {
          method: 'POST',
          path: '/api/life-tracker/habits',
          description: 'Criar novo hÃ¡bito',
          parameters: ['name', 'frequency', 'target', 'category'],
          response: 'HabitCreated'
        },
        {
          method: 'PUT',
          path: '/api/life-tracker/goals/{id}',
          description: 'Atualizar meta',
          parameters: ['id', 'progress', 'status'],
          response: 'GoalUpdated'
        },
        {
          method: 'GET',
          path: '/api/life-tracker/gamification/achievements',
          description: 'Obter conquistas do usuÃ¡rio',
          parameters: ['userId'],
          response: 'AchievementsList'
        }
      ]}
      businessRules={[
        'UsuÃ¡rios podem criar atÃ© 10 hÃ¡bitos simultÃ¢neos',
        'Metas devem ter prazo definido (mÃ¡ximo 1 ano)',
        'Sistema de pontos baseado em completude de tarefas',
        'NotificaÃ§Ãµes automÃ¡ticas para lembretes',
        'Analytics atualizados em tempo real'
      ]}
      integrations={[
        'MongoDB - PersistÃªncia de dados',
        'Redis - Cache de sessÃµes',
        'JWT Service - AutenticaÃ§Ã£o',
        'Notification Service - Alertas',
        'Analytics Engine - Processamento de dados'
      ]}
    />
  ),
};

export const PaymentAPI: Story = {
  render: () => (
    <APIDocumentation
      title="ðŸ’³ Payment API"
      description="Sistema de processamento de pagamentos e transaÃ§Ãµes financeiras"
      endpoints={[
        {
          method: 'POST',
          path: '/api/payments/process',
          description: 'Processar pagamento',
          parameters: ['amount', 'currency', 'paymentMethod', 'customerId'],
          response: 'PaymentResult'
        },
        {
          method: 'GET',
          path: '/api/payments/transactions',
          description: 'Listar transaÃ§Ãµes do usuÃ¡rio',
          parameters: ['userId', 'dateRange', 'status'],
          response: 'TransactionsList'
        },
        {
          method: 'POST',
          path: '/api/payments/refund',
          description: 'Processar reembolso',
          parameters: ['transactionId', 'amount', 'reason'],
          response: 'RefundResult'
        },
        {
          method: 'GET',
          path: '/api/payments/balance',
          description: 'Obter saldo da conta',
          parameters: ['userId'],
          response: 'AccountBalance'
        }
      ]}
      businessRules={[
        'Pagamentos acima de R$ 1.000 requerem autenticaÃ§Ã£o 2FA',
        'Reembolsos sÃ³ sÃ£o permitidos em atÃ© 30 dias',
        'Taxa de processamento de 2.9% + R$ 0.39',
        'Limite diÃ¡rio de R$ 10.000 por usuÃ¡rio',
        'TransaÃ§Ãµes sÃ£o criptografadas e auditadas'
      ]}
      integrations={[
        'Stripe - Gateway de pagamento',
        'MongoDB - HistÃ³rico de transaÃ§Ãµes',
        'Redis - Cache de sessÃµes',
        'Audit Service - Log de transaÃ§Ãµes',
        'Notification Service - ConfirmaÃ§Ãµes'
      ]}
    />
  ),
};

export const ProductsAPI: Story = {
  render: () => (
    <APIDocumentation
      title="ðŸ“¦ Products API"
      description="Sistema de gerenciamento de produtos e catÃ¡logo"
      endpoints={[
        {
          method: 'GET',
          path: '/api/products',
          description: 'Listar produtos',
          parameters: ['category', 'priceRange', 'availability', 'sort'],
          response: 'ProductsList'
        },
        {
          method: 'POST',
          path: '/api/products',
          description: 'Criar novo produto',
          parameters: ['name', 'description', 'price', 'category', 'inventory'],
          response: 'ProductCreated'
        },
        {
          method: 'PUT',
          path: '/api/products/{id}',
          description: 'Atualizar produto',
          parameters: ['id', 'name', 'description', 'price', 'inventory'],
          response: 'ProductUpdated'
        },
        {
          method: 'GET',
          path: '/api/products/{id}/reviews',
          description: 'Obter avaliaÃ§Ãµes do produto',
          parameters: ['id', 'rating', 'dateRange'],
          response: 'ProductReviews'
        }
      ]}
      businessRules={[
        'Produtos devem ter preÃ§o mÃ­nimo de R$ 1.00',
        'Estoque nÃ£o pode ser negativo',
        'AvaliaÃ§Ãµes sÃ£o moderadas automaticamente',
        'Produtos inativos nÃ£o aparecem na busca',
        'Categorias sÃ£o hierÃ¡rquicas (mÃ¡ximo 3 nÃ­veis)'
      ]}
      integrations={[
        'MongoDB - CatÃ¡logo de produtos',
        'Elasticsearch - Busca e filtros',
        'Image Service - Upload de imagens',
        'Review Service - Sistema de avaliaÃ§Ãµes',
        'Inventory Service - Controle de estoque'
      ]}
    />
  ),
};

export const StudyAssistantAPI: Story = {
  render: () => (
    <APIDocumentation
      title="ðŸŽ“ Study Assistant API"
      description="Assistente educacional com IA para estudos e concursos"
      endpoints={[
        {
          method: 'POST',
          path: '/api/study/plan',
          description: 'Criar plano de estudos',
          parameters: ['subject', 'level', 'deadline', 'availableTime'],
          response: 'StudyPlan'
        },
        {
          method: 'GET',
          path: '/api/study/questions',
          description: 'Obter questÃµes de estudo',
          parameters: ['subject', 'difficulty', 'type', 'count'],
          response: 'QuestionsList'
        },
        {
          method: 'POST',
          path: '/api/study/simulation',
          description: 'Iniciar simulaÃ§Ã£o de prova',
          parameters: ['examType', 'duration', 'questions'],
          response: 'SimulationStarted'
        },
        {
          method: 'GET',
          path: '/api/study/progress',
          description: 'Obter progresso do estudante',
          parameters: ['userId', 'subject', 'period'],
          response: 'StudyProgress'
        }
      ]}
      businessRules={[
        'Planos de estudo sÃ£o personalizados por IA',
        'QuestÃµes sÃ£o selecionadas por algoritmo adaptativo',
        'SimulaÃ§Ãµes tÃªm tempo limitado e sÃ£o cronometradas',
        'Progresso Ã© calculado baseado em acertos e tempo',
        'RecomendaÃ§Ãµes sÃ£o atualizadas diariamente'
      ]}
      integrations={[
        'AI Service - GeraÃ§Ã£o de planos',
        'Question Bank - Base de questÃµes',
        'Progress Tracker - Acompanhamento',
        'Recommendation Engine - SugestÃµes',
        'Analytics Service - MÃ©tricas de aprendizado'
      ]}
    />
  ),
};

export const NodejsBusinessRules: Story = {
  render: () => (
    <BusinessRules
      title="ðŸ“‹ Regras de NegÃ³cio - Node.js APIs"
      rules={[
        {
          category: 'AutenticaÃ§Ã£o e SeguranÃ§a',
          rules: [
            'Tokens JWT expiram em 24 horas',
            'Refresh tokens sÃ£o vÃ¡lidos por 30 dias',
            'Tentativas de login sÃ£o limitadas a 5 por minuto',
            'Senhas devem ter pelo menos 8 caracteres',
            'AutenticaÃ§Ã£o 2FA Ã© obrigatÃ³ria para pagamentos'
          ]
        },
        {
          category: 'Limites e Quotas',
          rules: [
            'Rate limiting: 100 requests/min por usuÃ¡rio',
            'Upload de arquivos: mÃ¡ximo 10MB',
            'HÃ¡bitos simultÃ¢neos: mÃ¡ximo 10 por usuÃ¡rio',
            'Metas ativas: mÃ¡ximo 5 por usuÃ¡rio',
            'TransaÃ§Ãµes diÃ¡rias: mÃ¡ximo R$ 10.000'
          ]
        },
        {
          category: 'ValidaÃ§Ã£o de Dados',
          rules: [
            'Emails devem ser Ãºnicos no sistema',
            'CPF deve ser vÃ¡lido e Ãºnico',
            'Datas nÃ£o podem ser futuras para criaÃ§Ã£o',
            'PreÃ§os devem ser positivos',
            'Categorias devem existir na base'
          ]
        },
        {
          category: 'Processamento',
          rules: [
            'Pagamentos sÃ£o processados em atÃ© 24h',
            'NotificaÃ§Ãµes sÃ£o enviadas em tempo real',
            'Analytics sÃ£o atualizados a cada hora',
            'Backups sÃ£o realizados diariamente',
            'Logs sÃ£o mantidos por 1 ano'
          ]
        }
      ]}
    />
  ),
};

export const NodejsIntegrationFlow: Story = {
  render: () => (
    <IntegrationFlow
      title="ðŸ”„ Fluxo de IntegraÃ§Ã£o - Node.js APIs"
      description="Como as APIs Node.js se integram com outros serviÃ§os"
      flows={[
        {
          name: 'Fluxo de AutenticaÃ§Ã£o',
          steps: [
            'Cliente envia credenciais',
            'API valida dados no MongoDB',
            'JWT Ã© gerado e retornado',
            'Cliente armazena token',
            'Requests subsequentes incluem token'
          ],
          integrations: ['MongoDB', 'JWT Service', 'Redis Cache']
        },
        {
          name: 'Fluxo de Pagamento',
          steps: [
            'Cliente inicia pagamento',
            'API valida dados e limites',
            'Stripe processa transaÃ§Ã£o',
            'Resultado Ã© salvo no MongoDB',
            'NotificaÃ§Ã£o Ã© enviada ao usuÃ¡rio'
          ],
          integrations: ['Stripe', 'MongoDB', 'Notification Service']
        },
        {
          name: 'Fluxo de Analytics',
          steps: [
            'Dados sÃ£o coletados das APIs',
            'Processamento em tempo real',
            'MÃ©tricas sÃ£o calculadas',
            'Resultados sÃ£o armazenados',
            'Dashboard Ã© atualizado'
          ],
          integrations: ['MongoDB', 'Analytics Engine', 'Redis Cache']
        }
      ]}
    />
  ),
};
